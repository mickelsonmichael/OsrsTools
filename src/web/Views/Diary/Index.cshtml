@model DiaryRequirements

@{
    ViewData["Title"] = "Requirements";
    ViewData["PlayerName"] = @Model.Levels.PlayerName;
    int id = 0;
    var diaries = Model.Diaries.GetDiaries();

    var skillRequirements = diaries
        .SelectMany(x => x.Diary.GetDifficulties())
        .GroupBy(x => x.Name)
        .Select(x => new
        {
            DifficultyName = x.Key,
            Skills = x.SelectMany(x => x.Difficulty.GetSkills())
                        .GroupBy(y => y.Name)
                        .Select(y => new { SkillName = y.Key, MaxLevel = y.Max(y => y.Level) })
                        .Where(x => x.MaxLevel > 0)
                        .OrderBy(x => x.SkillName)
        });

    var playerLevels = Model.Levels.Skills.ToDictionary(x => x.Name, y => y.Level);
}

<h2>Achievement Diaries</h2>

<div class="row">
    @foreach (var diary in skillRequirements)
    {

        <div class="col-12 col-sm-6 col-md-3">
            <div class="card mb-1">
                <div class="card-body">
                    <h3>@diary.DifficultyName</h3>
                    <div class="table-responsive">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th>SKill</th>
                                    <th>Level Req.</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var skill in diary.Skills.OrderBy(x => x.SkillName))
                                {
                                    var css = skill.MaxLevel <= playerLevels[skill.SkillName] ? string.Empty : "table-danger";

                                    <tr class="@css">
                                        <td>@skill.SkillName</td>
                                        <td>@skill.MaxLevel</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<hr />

<div class="alert alert-info">
    <strong>Click on a diary name to expand it.</strong>
    <br />
    Any skills marked with an asterisk (*) are boostable. A skill with a slash indicates the level for normal accounts
    and ironman/ironwoman accounts respectively (e.g. normal/iron). The row will be marked as yellow if the account
    does not meet the ironman/ironwoman requirement.
</div>

@foreach (var diaryData in diaries)
{
    var (diaryName, diary) = diaryData;
    var diaryId = "diary" + id++;
    <h3>
        <a data-toggle="collapse" href="#@diaryId" role="button" aria-expanded="false" aria-controls="@diaryId">
            @diaryName
        </a>
    </h3>
    <div class="row collapse" id="@diaryId">
        @foreach (var difficultyData in @diary.GetDifficulties())
        {
            var (name, difficulty) = difficultyData;

            <div class="col-12 col-sm-6 col-lg-3 px-1 mb-1">
                <div class="card">
                    <div class="card-body">
                        <h4>@name</h4>

                        <table class="table table-striped table-hover table-sm mb-1">
                            <thead>
                                <tr>
                                    <th>Skill</th>
                                    <th>Needed (Have)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var skill in difficulty.GetSkills())
                                {
                                    // get the player's current level
                                    var currentLevel = playerLevels[skill.Name];
                                    var iron = difficulty?.Ironmen?[skill.Name];

                                    // Only display the skill if there are level requirements
                                    if (skill.Level == 0 && !(iron > 0))
                                    {
                                        continue;
                                    }

                                    // paint the row red if they don't have the level required
                                    var rowContext = currentLevel < skill.Level ? "table-danger" : string.Empty;

                                    // paint the row orange if they don't have the ironman level required
                                    if (currentLevel >= skill.Level && currentLevel < iron)
                                    {
                                        rowContext = "table-warning";
                                    }

                                    <tr class="@rowContext">
                                        <td>
                                            @skill.Name
                                            @if (@difficulty.Boostable?.Contains(@skill.Name) ?? false)
                                            {
                                                <span>*</span>
                                            }
                                        </td>
                                        <td>
                                            @if (iron > 0)
                                            {
                                                <span>@skill.Level/@iron</span>
                                            }
                                            else
                                            {
                                                <span>@skill.Level</span>
                                            }
                                            (@currentLevel)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <hr />

                        <h5>Quests</h5>
                        @if (difficulty.Quests?.Count() > 0)
                        {
                            <ul>
                                @foreach (var quest in @difficulty.Quests)
                                {
                                    <li>@quest</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <em>No quest requirements</em>
                        }

                    </div>
                </div>
            </div>
        }
    </div>

    <hr />
}
